vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

bool is_valid(vector<vector<int>>& grid, int x, int y) {
	int n = grid.size(), m = grid[0].size();
	if (x >= 0 && x < n && y >= 0 && y < m) return true;
	reture false;
}

void bfs(vector<vector<int>>& grid, vector<pair<int>>& sources, vector<pair<int>>& leader) {
	//	对每一个source进行bfs
	int n = grid.size(), m = gris[0].size();
	for (int i = 0; i < sources.size(); i++) {
		auoto [source_x, source_y] = sources[i];
		queue<pair<int, int>> q;
		q.push({source_x, source_y});
		grid[sources[i].first] 
		int level = 0;
		while (!q.empty()) {
			int len = q.size();
			for (int j = 0; j < len; j++) {
				auto [a, b] = q.front();
				q.pop();
				for (int d = 0; d < 4; d++) {
					int x = a + dirs[d][0], y = b + dirs[d][1];
					if (is_valid(grid, x, y) && grid[x][y] >= level) {
						grid[x][y] = level;
						q.push({x, y});
					}
				}
			}
			level++;
		}
	}
	
	// 查找每个leader的最短路径
	vector<int> res;
	for (int i = 0; i < leader.size(); i++) {
		auto [a, b] = leader[i];
		res.push_back(grid[a][b]);
	}
}


/*
Sample input 1：

5 4 2 3

1 1

5 4

3 3

5 3

2 4

Initial grid:
[ 0  INF INF INF]
[INF INF INF INF]
[INF INF INF INF]
[INF INF INF INF]
[INF INF INF  0 ]

Source one after bfs:
[ 0   1   2  3 ]
[ 1   2   3  4 ]
[ 2   3   4  5 ]
[ 3   4   5  6 ]
[ 4   5   6  0 ]

Source two after bfs:
[ 0   1   2  3 ]
[ 1   2   3  3 ]
[ 2   3   3  2 ]
[ 3   3   2  1 ]
[ 3   2   1  0 ]

res = [3, 1, 3]
*/